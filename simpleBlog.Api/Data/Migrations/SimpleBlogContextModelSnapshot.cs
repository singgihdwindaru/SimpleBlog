// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using simpleBlog.Api.data;

namespace simpleBlog.Api.data.migrations
{
    [DbContext(typeof(SimpleBlogContext))]
    partial class SimpleBlogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("uuid-ossp")
                .HasAnnotation("Relational:Collation", "English_Indonesia.1252")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("simpleBlog.Api.data.Artikel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasIdentityOptions(6L, null, null, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Excerpt")
                        .HasColumnType("text")
                        .HasColumnName("excerpt");

                    b.Property<DateTime?>("PubDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("pub_date");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("title");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AuthorId" }, "fki_fk_artikel_user");

                    b.ToTable("artikel");
                });

            modelBuilder.Entity("simpleBlog.Api.data.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("RoleDescription")
                        .HasColumnType("character varying")
                        .HasColumnName("role_description");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("role_name");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("simpleBlog.Api.data.Status", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Nama")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nama");

                    b.HasKey("Id");

                    b.ToTable("status");
                });

            modelBuilder.Entity("simpleBlog.Api.data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("simpleBlog.Api.data.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "fki_userrole_fkUserid");

                    b.HasIndex(new[] { "RoleId" }, "fki_userrole_fkroleid");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("simpleBlog.Api.data.Artikel", b =>
                {
                    b.HasOne("simpleBlog.Api.data.Status", "Author")
                        .WithMany("Artikels")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_artikel_status");

                    b.HasOne("simpleBlog.Api.data.User", "AuthorNavigation")
                        .WithMany("Artikels")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_artikel_user");

                    b.Navigation("Author");

                    b.Navigation("AuthorNavigation");
                });

            modelBuilder.Entity("simpleBlog.Api.data.UserRole", b =>
                {
                    b.HasOne("simpleBlog.Api.data.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("userrole_fkroleid")
                        .IsRequired();

                    b.HasOne("simpleBlog.Api.data.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("userrole_fkUserid")
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("simpleBlog.Api.data.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("simpleBlog.Api.data.Status", b =>
                {
                    b.Navigation("Artikels");
                });

            modelBuilder.Entity("simpleBlog.Api.data.User", b =>
                {
                    b.Navigation("Artikels");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
